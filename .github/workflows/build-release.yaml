name: Build release
run-name: Build release
on:
  workflow_dispatch:
  repository_dispatch:
    types: [newrelease]
  push:
    branches:
      - release/*
    paths-ignore:
      - '.github/**'

jobs:
  version:
    name: Get release version
    runs-on: ubuntu-latest
    outputs:
      branch: "${{ steps.version.outputs.branch }}"
      version: ${{ steps.final.outputs.version }}
      previous-version: ${{ steps.version2.outputs.previous-version }}

    steps:
      - name: Get version
        id: version
        run: |
          if [[ ${{ github.event_name }} == 'repository_dispatch' ]]; then
            echo "version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
            echo "branch=release/${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(echo ${{ github.ref_name }} | cut -d'/' -f2)
            echo "2 $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name : "Checkout Action"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.version.outputs.branch }}

      - name: 🕹️ Git Version
        id: version2
        uses: codacy/git-version@2.8.0
        with:
          minor-identifier: 'feat:'
          release-branch: ${{ steps.version.outputs.branch }}

      - name: Version without patch
        id: version3
        run: |
          VERSION=$(echo "${{ steps.version.outputs.version }}" | cut -d'.' -f1,2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get final version
        id: final
        run: |
            if [[ ${{ github.event_name }} == 'repository_dispatch' ]]; then
              echo "version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
            else
              echo "version=${{ steps.version3.outputs.version }}" >> $GITHUB_OUTPUT
            fi

  build:
    name: "Build and push Docker image"
    runs-on: ubuntu-latest
    needs: version

    steps:

      - name : "Checkout Action"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ needs.version.outputs.branch }}

      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.4.0

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            ENV=dev
          tags: ${{ secrets.REGISTRY_USERNAME }}/${{ github.event.repository.name }}:${{ needs.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  prerelease:
    name: Update prerelease
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs: version

    steps:
      - name: "Checkout Action"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ needs.version.outputs.branch }}

      - name: Delete a Release
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          tag_name: ${{ needs.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Drafter
        uses: release-drafter/release-drafter@v5.20.0
        with:
          name: ${{ needs.version.outputs.version }}
          tag: ${{ needs.version.outputs.version }}
          version: ${{ needs.version.outputs.version }}
          publish: true
          prerelease: true
          commitish: ${{ needs.version.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger CD
        uses: peter-evans/repository-dispatch@v2.1.1
        with:
          event-type: deploy-release
          repository: valentin-barbotin/esgi-devops-gitops
          token: ${{ secrets.PAT }}
          client-payload: '
            {
              "service": "${{ github.event.repository.name }}",
              "version": "${{ needs.version.outputs.version }}"
            }
            '
  merge:
    name: Merge
    runs-on: ubuntu-latest
    needs: [prerelease, build, version]
    steps:
      - name: "Checkout Action"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ needs.version.outputs.branch }}

      - name: Merge development -> staging
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: ${{ needs.version.outputs.branch }}
          target_branch: develop
          github_token: ${{ github.token }}